/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CourseCourseIDRouteImport } from './routes/course/$courseID'
import { Route as UidProfileRouteImport } from './routes/$uid/profile'
import { Route as CourseCourseIDIndexRouteImport } from './routes/course/$courseID/index'
import { Route as CourseCourseIDSyllabusRouteImport } from './routes/course/$courseID/syllabus'
import { Route as CourseCourseIDPeopleRouteImport } from './routes/course/$courseID/people'
import { Route as CourseCourseIDMediaRouteImport } from './routes/course/$courseID/media'
import { Route as CourseCourseIDGradesRouteImport } from './routes/course/$courseID/grades'
import { Route as CourseCourseIDAssignmentsRouteImport } from './routes/course/$courseID/assignments'
import { Route as CourseCourseIDAssignmentIDAssignmentRouteImport } from './routes/course/$courseID/$assignmentID/assignment'

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseCourseIDRoute = CourseCourseIDRouteImport.update({
  id: '/course/$courseID',
  path: '/course/$courseID',
  getParentRoute: () => rootRouteImport,
} as any)
const UidProfileRoute = UidProfileRouteImport.update({
  id: '/$uid/profile',
  path: '/$uid/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseCourseIDIndexRoute = CourseCourseIDIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CourseCourseIDRoute,
} as any)
const CourseCourseIDSyllabusRoute = CourseCourseIDSyllabusRouteImport.update({
  id: '/syllabus',
  path: '/syllabus',
  getParentRoute: () => CourseCourseIDRoute,
} as any)
const CourseCourseIDPeopleRoute = CourseCourseIDPeopleRouteImport.update({
  id: '/people',
  path: '/people',
  getParentRoute: () => CourseCourseIDRoute,
} as any)
const CourseCourseIDMediaRoute = CourseCourseIDMediaRouteImport.update({
  id: '/media',
  path: '/media',
  getParentRoute: () => CourseCourseIDRoute,
} as any)
const CourseCourseIDGradesRoute = CourseCourseIDGradesRouteImport.update({
  id: '/grades',
  path: '/grades',
  getParentRoute: () => CourseCourseIDRoute,
} as any)
const CourseCourseIDAssignmentsRoute =
  CourseCourseIDAssignmentsRouteImport.update({
    id: '/assignments',
    path: '/assignments',
    getParentRoute: () => CourseCourseIDRoute,
  } as any)
const CourseCourseIDAssignmentIDAssignmentRoute =
  CourseCourseIDAssignmentIDAssignmentRouteImport.update({
    id: '/$assignmentID/assignment',
    path: '/$assignmentID/assignment',
    getParentRoute: () => CourseCourseIDRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/$uid/profile': typeof UidProfileRoute
  '/course/$courseID': typeof CourseCourseIDRouteWithChildren
  '/course/$courseID/assignments': typeof CourseCourseIDAssignmentsRoute
  '/course/$courseID/grades': typeof CourseCourseIDGradesRoute
  '/course/$courseID/media': typeof CourseCourseIDMediaRoute
  '/course/$courseID/people': typeof CourseCourseIDPeopleRoute
  '/course/$courseID/syllabus': typeof CourseCourseIDSyllabusRoute
  '/course/$courseID/': typeof CourseCourseIDIndexRoute
  '/course/$courseID/$assignmentID/assignment': typeof CourseCourseIDAssignmentIDAssignmentRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/$uid/profile': typeof UidProfileRoute
  '/course/$courseID/assignments': typeof CourseCourseIDAssignmentsRoute
  '/course/$courseID/grades': typeof CourseCourseIDGradesRoute
  '/course/$courseID/media': typeof CourseCourseIDMediaRoute
  '/course/$courseID/people': typeof CourseCourseIDPeopleRoute
  '/course/$courseID/syllabus': typeof CourseCourseIDSyllabusRoute
  '/course/$courseID': typeof CourseCourseIDIndexRoute
  '/course/$courseID/$assignmentID/assignment': typeof CourseCourseIDAssignmentIDAssignmentRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/$uid/profile': typeof UidProfileRoute
  '/course/$courseID': typeof CourseCourseIDRouteWithChildren
  '/course/$courseID/assignments': typeof CourseCourseIDAssignmentsRoute
  '/course/$courseID/grades': typeof CourseCourseIDGradesRoute
  '/course/$courseID/media': typeof CourseCourseIDMediaRoute
  '/course/$courseID/people': typeof CourseCourseIDPeopleRoute
  '/course/$courseID/syllabus': typeof CourseCourseIDSyllabusRoute
  '/course/$courseID/': typeof CourseCourseIDIndexRoute
  '/course/$courseID/$assignmentID/assignment': typeof CourseCourseIDAssignmentIDAssignmentRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/$uid/profile'
    | '/course/$courseID'
    | '/course/$courseID/assignments'
    | '/course/$courseID/grades'
    | '/course/$courseID/media'
    | '/course/$courseID/people'
    | '/course/$courseID/syllabus'
    | '/course/$courseID/'
    | '/course/$courseID/$assignmentID/assignment'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/$uid/profile'
    | '/course/$courseID/assignments'
    | '/course/$courseID/grades'
    | '/course/$courseID/media'
    | '/course/$courseID/people'
    | '/course/$courseID/syllabus'
    | '/course/$courseID'
    | '/course/$courseID/$assignmentID/assignment'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/$uid/profile'
    | '/course/$courseID'
    | '/course/$courseID/assignments'
    | '/course/$courseID/grades'
    | '/course/$courseID/media'
    | '/course/$courseID/people'
    | '/course/$courseID/syllabus'
    | '/course/$courseID/'
    | '/course/$courseID/$assignmentID/assignment'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  UidProfileRoute: typeof UidProfileRoute
  CourseCourseIDRoute: typeof CourseCourseIDRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/$courseID': {
      id: '/course/$courseID'
      path: '/course/$courseID'
      fullPath: '/course/$courseID'
      preLoaderRoute: typeof CourseCourseIDRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$uid/profile': {
      id: '/$uid/profile'
      path: '/$uid/profile'
      fullPath: '/$uid/profile'
      preLoaderRoute: typeof UidProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/$courseID/': {
      id: '/course/$courseID/'
      path: '/'
      fullPath: '/course/$courseID/'
      preLoaderRoute: typeof CourseCourseIDIndexRouteImport
      parentRoute: typeof CourseCourseIDRoute
    }
    '/course/$courseID/syllabus': {
      id: '/course/$courseID/syllabus'
      path: '/syllabus'
      fullPath: '/course/$courseID/syllabus'
      preLoaderRoute: typeof CourseCourseIDSyllabusRouteImport
      parentRoute: typeof CourseCourseIDRoute
    }
    '/course/$courseID/people': {
      id: '/course/$courseID/people'
      path: '/people'
      fullPath: '/course/$courseID/people'
      preLoaderRoute: typeof CourseCourseIDPeopleRouteImport
      parentRoute: typeof CourseCourseIDRoute
    }
    '/course/$courseID/media': {
      id: '/course/$courseID/media'
      path: '/media'
      fullPath: '/course/$courseID/media'
      preLoaderRoute: typeof CourseCourseIDMediaRouteImport
      parentRoute: typeof CourseCourseIDRoute
    }
    '/course/$courseID/grades': {
      id: '/course/$courseID/grades'
      path: '/grades'
      fullPath: '/course/$courseID/grades'
      preLoaderRoute: typeof CourseCourseIDGradesRouteImport
      parentRoute: typeof CourseCourseIDRoute
    }
    '/course/$courseID/assignments': {
      id: '/course/$courseID/assignments'
      path: '/assignments'
      fullPath: '/course/$courseID/assignments'
      preLoaderRoute: typeof CourseCourseIDAssignmentsRouteImport
      parentRoute: typeof CourseCourseIDRoute
    }
    '/course/$courseID/$assignmentID/assignment': {
      id: '/course/$courseID/$assignmentID/assignment'
      path: '/$assignmentID/assignment'
      fullPath: '/course/$courseID/$assignmentID/assignment'
      preLoaderRoute: typeof CourseCourseIDAssignmentIDAssignmentRouteImport
      parentRoute: typeof CourseCourseIDRoute
    }
  }
}

interface CourseCourseIDRouteChildren {
  CourseCourseIDAssignmentsRoute: typeof CourseCourseIDAssignmentsRoute
  CourseCourseIDGradesRoute: typeof CourseCourseIDGradesRoute
  CourseCourseIDMediaRoute: typeof CourseCourseIDMediaRoute
  CourseCourseIDPeopleRoute: typeof CourseCourseIDPeopleRoute
  CourseCourseIDSyllabusRoute: typeof CourseCourseIDSyllabusRoute
  CourseCourseIDIndexRoute: typeof CourseCourseIDIndexRoute
  CourseCourseIDAssignmentIDAssignmentRoute: typeof CourseCourseIDAssignmentIDAssignmentRoute
}

const CourseCourseIDRouteChildren: CourseCourseIDRouteChildren = {
  CourseCourseIDAssignmentsRoute: CourseCourseIDAssignmentsRoute,
  CourseCourseIDGradesRoute: CourseCourseIDGradesRoute,
  CourseCourseIDMediaRoute: CourseCourseIDMediaRoute,
  CourseCourseIDPeopleRoute: CourseCourseIDPeopleRoute,
  CourseCourseIDSyllabusRoute: CourseCourseIDSyllabusRoute,
  CourseCourseIDIndexRoute: CourseCourseIDIndexRoute,
  CourseCourseIDAssignmentIDAssignmentRoute:
    CourseCourseIDAssignmentIDAssignmentRoute,
}

const CourseCourseIDRouteWithChildren = CourseCourseIDRoute._addFileChildren(
  CourseCourseIDRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  UidProfileRoute: UidProfileRoute,
  CourseCourseIDRoute: CourseCourseIDRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
